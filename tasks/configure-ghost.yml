---
- name: "({{ item['name'] | default(item['id']) }}) Set facts for 'production'"
  set_fact:
    install_type: "production"
    ghost_group: "ghost"
  when: item['local'] is undefined

- name: "({{ item['name'] | default(item['id']) }}) Set facts for 'development'"
  set_fact:
    install_type: "development"
    ghost_group: "staff"
  when: item['local'] is defined

- name: "({{ item['name'] | default(item['id']) }}) Check if Ghost is installed"
  ansible.builtin.file:
    path: "{{ ghost_base_dir }}/{{ item['id'] }}/.ghost-cli"
    state: "file"
  register: ghost_installed
  ignore_errors: true

- name: Include Ghost Install Tasks
  include_tasks: ghost-install.yml
  when: ghost_installed is failed

- name: Load ghost-cli config
  ansible.builtin.slurp:
    src: "{{ ghost_base_dir }}/{{ item['id'] }}/.ghost-cli"
  register: cli_file

- name: Pasre config json
  ansible.builtin.set_fact:
    ghost_cli: "{{ cli_file['content'] | b64decode | from_json }}"

- name: Include MySQL Database Tasks
  include_tasks: setup-mysql-database.yml
  vars:
    mysql: "{{ item['database']['connection'] }}"
  when: "item['database'] is defined and 'mysql' in item['database']['client']"

- name: Include s3 Storage Adapter Tasks
  include_tasks: setup-s3-storage.yml
  vars:
    storage: "{{ item['storage'] }}"
  when: item['storage'] is defined

- name: Include Service Tasks
  include_tasks: ghost-service.yml
  when: install_type == "production"

- name: Include Integrity Check Tasks
  include_tasks: ghost-integrity-check.yml

- name: Include Upgrade Ghost Tasks
  include_tasks: ghost-upgrade.yml
  when: ghost_installed is succeeded

- name: "({{ item['name'] | default(item['id']) }}) Run ghost stop command"
  become: true
  become_user: "{{ ghost_user }}"
  command:
    chdir: "{{ ghost_base_dir }}/{{ item['id'] }}"
    cmd: ghost stop
  when:
    - ghost_installed is succeeded
    - item['state'] == "stopped" or config_updated is changed

- name: "({{ item['name'] | default(item['id']) }}) Run ghost start command"
  become: true
  become_user: "{{ ghost_user }}"
  command:
    chdir: "{{ ghost_base_dir }}/{{ item['id'] }}"
    cmd: ghost start
  register: ghost_started
  changed_when: "'Ghost is already running!' not in ghost_started['stdout']"
  when: item['state'] == "started"
